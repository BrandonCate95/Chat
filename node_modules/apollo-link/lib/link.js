'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ApolloLink = exports.concat = exports.split = exports.from = exports.empty = undefined;
exports.execute = execute;

var _zenObservableTs = require('zen-observable-ts');

var _zenObservableTs2 = _interopRequireDefault(_zenObservableTs);

var _linkUtils = require('./linkUtils');

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var passthrough = function passthrough(op, forward) {
    return forward ? forward(op) : _zenObservableTs2.default.of();
};
var toLink = function toLink(handler) {
    return typeof handler === 'function' ? new ApolloLink(handler) : handler;
};
var empty = exports.empty = function empty() {
    return new ApolloLink(function (op, forward) {
        return _zenObservableTs2.default.of();
    });
};
var from = exports.from = function from(links) {
    if (links.length === 0) return empty();
    return links.map(toLink).reduce(function (x, y) {
        return x.concat(y);
    });
};
var split = exports.split = function split(test, left, right) {
    if (right === void 0) {
        right = new ApolloLink(passthrough);
    }
    var leftLink = toLink(left);
    var rightLink = toLink(right);
    if ((0, _linkUtils.isTerminating)(leftLink) && (0, _linkUtils.isTerminating)(rightLink)) {
        return new ApolloLink(function (operation) {
            return test(operation) ? leftLink.request(operation) || _zenObservableTs2.default.of() : rightLink.request(operation) || _zenObservableTs2.default.of();
        });
    } else {
        return new ApolloLink(function (operation, forward) {
            return test(operation) ? leftLink.request(operation, forward) || _zenObservableTs2.default.of() : rightLink.request(operation, forward) || _zenObservableTs2.default.of();
        });
    }
};
// join two Links together
var concat = exports.concat = function concat(first, second) {
    var firstLink = toLink(first);
    if ((0, _linkUtils.isTerminating)(firstLink)) {
        console.warn(new _linkUtils.LinkError("You are calling concat on a terminating link, which will have no effect", firstLink));
        return firstLink;
    }
    var nextLink = toLink(second);
    if ((0, _linkUtils.isTerminating)(nextLink)) {
        return new ApolloLink(function (operation) {
            return firstLink.request(operation, function (op) {
                return nextLink.request(op) || _zenObservableTs2.default.of();
            }) || _zenObservableTs2.default.of();
        });
    } else {
        return new ApolloLink(function (operation, forward) {
            return firstLink.request(operation, function (op) {
                return nextLink.request(op, forward) || _zenObservableTs2.default.of();
            }) || _zenObservableTs2.default.of();
        });
    }
};
var ApolloLink = /** @class */function () {
    function ApolloLink(request) {
        if (request) this.request = request;
    }
    ApolloLink.prototype.split = function (test, left, right) {
        if (right === void 0) {
            right = new ApolloLink(passthrough);
        }
        return this.concat(split(test, left, right));
    };
    ApolloLink.prototype.concat = function (next) {
        return concat(this, next);
    };
    ApolloLink.prototype.request = function (operation, forward) {
        throw new Error('request is not implemented');
    };
    ApolloLink.empty = empty;
    ApolloLink.from = from;
    ApolloLink.split = split;
    ApolloLink.execute = execute;
    return ApolloLink;
}();
exports.ApolloLink = ApolloLink;
function execute(link, operation) {
    return link.request((0, _linkUtils.createOperation)(operation.context, (0, _linkUtils.transformOperation)((0, _linkUtils.validateOperation)(operation)))) || _zenObservableTs2.default.of();
}
//# sourceMappingURL=link.js.map