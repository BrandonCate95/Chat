'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.checkCalls = checkCalls;
exports.testLinkResults = testLinkResults;

var _graphqlTag = require('graphql-tag');

var _graphqlTag2 = _interopRequireDefault(_graphqlTag);

var _link = require('../link');

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var __makeTemplateObject = undefined && undefined.__makeTemplateObject || function (cooked, raw) {
    if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", { value: raw });
    } else {
        cooked.raw = raw;
    }
    return cooked;
};

var sampleQuery = (0, _graphqlTag2.default)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  query SampleQuery {\n    stub {\n      id\n    }\n  }\n"], ["\n  query SampleQuery {\n    stub {\n      id\n    }\n  }\n"])));
function checkCalls(calls, results) {
    if (calls === void 0) {
        calls = [];
    }
    expect(calls.length).toBe(results.length);
    calls.map(function (call, i) {
        return expect(call.data).toEqual(results[i]);
    });
}
function testLinkResults(params) {
    var link = params.link,
        context = params.context,
        variables = params.variables;
    var results = params.results || [];
    var query = params.query || sampleQuery;
    var done = params.done || function () {
        return void 0;
    };
    var spy = jest.fn();
    (0, _link.execute)(link, { query: query, context: context, variables: variables }).subscribe({
        next: spy,
        error: function error(_error) {
            expect(_error).toEqual(results.pop());
            checkCalls(spy.mock.calls[0], results);
            if (done) {
                done();
            }
        },
        complete: function complete() {
            checkCalls(spy.mock.calls[0], results);
            if (done) {
                done();
            }
        }
    });
}
var templateObject_1;
//# sourceMappingURL=testingUtils.js.map