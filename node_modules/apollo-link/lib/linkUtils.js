'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.makePromise = exports.LinkError = undefined;
exports.validateOperation = validateOperation;
exports.isTerminating = isTerminating;
exports.toPromise = toPromise;
exports.fromPromise = fromPromise;
exports.fromError = fromError;
exports.transformOperation = transformOperation;
exports.createOperation = createOperation;
exports.getKey = getKey;

var _apolloUtilities = require('apollo-utilities');

var _zenObservableTs = require('zen-observable-ts');

var _zenObservableTs2 = _interopRequireDefault(_zenObservableTs);

var _printer = require('graphql/language/printer');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = undefined && undefined.__assign || Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
    }
    return t;
};
function validateOperation(operation) {
    var OPERATION_FIELDS = ['query', 'operationName', 'variables', 'extensions', 'context'];
    for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {
        var key = _a[_i];
        if (OPERATION_FIELDS.indexOf(key) < 0) {
            throw new Error("illegal argument: " + key);
        }
    }
    return operation;
}
var LinkError = /** @class */function (_super) {
    __extends(LinkError, _super);
    function LinkError(message, link) {
        var _this = _super.call(this, message) || this;
        _this.link = link;
        return _this;
    }
    return LinkError;
}(Error);
exports.LinkError = LinkError;
function isTerminating(link) {
    return link.request.length <= 1;
}
function toPromise(observable) {
    var completed = false;
    return new Promise(function (resolve, reject) {
        observable.subscribe({
            next: function next(data) {
                if (completed) {
                    console.warn("Promise Wrapper does not support multiple results from Observable");
                } else {
                    completed = true;
                    resolve(data);
                }
            },
            error: reject
        });
    });
}
// backwards compat
var makePromise = exports.makePromise = toPromise;
function fromPromise(promise) {
    return new _zenObservableTs2.default(function (observer) {
        promise.then(function (value) {
            observer.next(value);
            observer.complete();
        }).catch(observer.error.bind(observer));
    });
}
function fromError(errorValue) {
    return new _zenObservableTs2.default(function (observer) {
        observer.error(errorValue);
    });
}
function transformOperation(operation) {
    var transformedOperation = {
        variables: operation.variables || {},
        extensions: operation.extensions || {},
        operationName: operation.operationName,
        query: operation.query
    };
    // best guess at an operation name
    if (!transformedOperation.operationName) {
        transformedOperation.operationName = typeof transformedOperation.query !== 'string' ? (0, _apolloUtilities.getOperationName)(transformedOperation.query) : '';
    }
    return transformedOperation;
}
function createOperation(starting, operation) {
    var context = __assign({}, starting);
    var setContext = function setContext(next) {
        if (typeof next === 'function') {
            context = __assign({}, context, next(context));
        } else {
            context = __assign({}, context, next);
        }
    };
    var getContext = function getContext() {
        return __assign({}, context);
    };
    Object.defineProperty(operation, 'setContext', {
        enumerable: false,
        value: setContext
    });
    Object.defineProperty(operation, 'getContext', {
        enumerable: false,
        value: getContext
    });
    Object.defineProperty(operation, 'toKey', {
        enumerable: false,
        value: function value() {
            return getKey(operation);
        }
    });
    return operation;
}
function getKey(operation) {
    // XXX we're assuming here that variables will be serialized in the same order.
    // that might not always be true
    return (0, _printer.print)(operation.query) + "|" + JSON.stringify(operation.variables) + "|" + operation.operationName;
}
//# sourceMappingURL=linkUtils.js.map